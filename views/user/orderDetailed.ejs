<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Summary</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f9f9f9;
        }

        .container {
            max-width: 800px;
            margin: 20px auto;
            background: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        table th,
        table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }

        table th {
            background-color: #f4f4f4;
        }

        .action {
            color: red;
            cursor: pointer;

        }

        .order-summary {
            margin-bottom: 20px;
        }

        .order-summary h3 {
            margin-bottom: 10px;
        }

        .order-summary p {
            margin: 5px 0;
        }

        .shipping-address h3 {
            margin-bottom: 10px;
        }

        .shipping-address p {
            margin: 5px 0;
        }

        .footer {
            text-align: center;
            margin-top: 20px;
            font-size: 14px;
            color: #777;
        }

        /* Style for the order status paragraph */
        .order-status {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }

        /* Status label styles */
        .status {
            font-weight: bold;
            padding: 5px 10px;
            margin-left: 10px;
            border-radius: 5px;
            text-transform: capitalize;
            display: inline-block;
        }

        /* Pending status style */
        .status.pending {
            color: #f39c12;
            /* Yellow text */
        }

        /* Shipped status style */
        .status.completed {
            color: #28a745;
            /* Blue text */
        }

        .status.cancelled {
            color: #dc3545;
            /* Red text */
        }

        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            width: 250px;
            height: 100vh;
            /* Full height */
            background-color: #2c3e50;
            color: #ecf0f1;
            display: flex;
            flex-direction: column;
            padding: 25px 20px;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            box-sizing: border-box;
            transition: transform 0.3s ease;
            animation: slideIn 0.5s ease-out;
            z-index: 10;
            /* Ensures sidebar is on top */
        }

        /* Sidebar Title */
        .sidebar h3 {
            font-size: 26px;
            font-weight: 600;
            margin-bottom: 30px;
            color: #fff;
            letter-spacing: 1px;
            text-transform: uppercase;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }

        /* Sidebar Links */
        .sidebar a {
            color: #ecf0f1;
            text-decoration: none;
            padding: 14px 20px;
            border-radius: 6px;
            margin-bottom: 15px;
            font-size: 18px;
            font-weight: 500;
            display: block;
            transition: background 0.3s, transform 0.3s ease;
            position: relative;
        }

        .sidebar a:hover {
            background-color: #34495e;
            transform: translateX(10px);
            /* Subtle hover effect */
        }

        .sidebar a::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background-color: #3498db;
            transform: scaleY(0);
            transition: transform 0.3s ease;
        }

        .sidebar a:hover::before {
            transform: scaleY(1);
        }

        .sidebar a.active {
            background-color: #3498db;
            color: #fff;
        }

        .sidebar a.active::before {
            background-color: #ecf0f1;
        }


        @keyframes slideIn {
            from {
                transform: translateX(-250px);
            }

            to {
                transform: translateX(0);
            }
        }


        button.action {
            background-color: #ff4d4d;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        button.action:hover {
            background-color: #e63946;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }


        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 5px;
            width: 300px;
            text-align: center;
        }


        .close {
            color: #aaa;
            font-size: 30px;
            font-weight: bold;
            position: absolute;
            top: 10px;
            right: 15px;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }


        button.action {
            background-color: red;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        button.action:hover {
            background-color: darkred;
        }


        button#confirm-cancel {
            background-color: green;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            margin: 10px;
            font-size: 16px;
        }

        button#confirm-cancel:hover {
            background-color: darkgreen;
        }

        button#close-modal {
            background-color: gray;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            font-size: 16px;
        }

        button#close-modal:hover {
            background-color: darkgray;
        }

        h3 {
            font-size: 18px;
            margin-bottom: 20px;
        }

        button.confirm-btn {
            background-color: green;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            font-size: 16px;
            margin: 10px;
            transition: background-color 0.3s ease;
        }

        button.confirm-btn:hover {
            background-color: darkgreen;
        }


        button.cancel-btn {
            background-color: gray;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            font-size: 16px;
            margin: 10px;
            transition: background-color 0.3s ease;
        }

        button.cancel-btn:hover {
            background-color: darkgray;
        }

        .btn {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            text-align: center;
            color: #fff;
            background-color: #f39c12;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: #d35400;
        }

        .retry-btn {
            background-color: #ff6b6b;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .retry-btn:hover {
            background-color: #e63946;
            transform: translateY(-2px);
        }

        .retry-btn:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .cancel-reason-dropdown {
            width: 100%;
            max-width: 300px;
            padding: 10px 15px;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 14px;
            background-color: #f9f9f9;
            transition: border 0.3s ease, background-color 0.3s ease;
            cursor: pointer;
        }

        .cancel-reason-dropdown:hover,
        .cancel-reason-dropdown:focus {
            border-color: #5c9dff;
            background-color: #f0f8ff;
            outline: none;
        }

        .cancel-reason-dropdown option {
            padding: 10px;
            font-size: 14px;
            background-color: #ffffff;
        }

        .cancel-reason-dropdown option[value="other"] {
            font-weight: bold;
            color: #ff6347;
        }
        .return-reason-dropdown {
            width: 100%;
            max-width: 300px;
            padding: 10px 15px;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 14px;
            background-color: #f9f9f9;
            transition: border 0.3s ease, background-color 0.3s ease;
            cursor: pointer;
        }
        .return-reason-dropdown:hover,
        .return-reason-dropdown:focus {
            border-color: #5c9dff;
            background-color: #f0f8ff;
            outline: none;
        }
        .return-reason-dropdown option {
            padding: 10px;
            font-size: 14px;
            background-color: #ffffff;
        }
        .return-reason-dropdown option[value="other"] {
            font-weight: bold;
            color: #ff6347;
        }
    </style>
</head>

<body>
    <div class="sidebar">
        <h3>Account Menu</h3>
        <a href="/">Home</a>
        <a href="/my-account/details">My Details</a>
        <a href="/my-address">My Address</a>
        <a href="/my-orders">My Orders</a>
        <a href="/my-wallet">wallet</a>
    </div>
    <div class="container">
        <table>
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Total Price</th>
                </tr>
            </thead>
            <tbody>
                <% if (order.cartItems && order.cartItems.length > 0) { %>
                    <% order.cartItems.forEach(item => { %>
                        <tr>
                            <td>
                                <%= item.product && item.product.name ? item.product.name : 'Product Name Not Available' %>
                            </td>
                            <td>₹<%= item.product && item.product.price ? item.product.price : 'N/A' %> × <%= item.quantity %></td>
                            <td>₹<%= (item.product && item.product.price) ? (item.product.price * item.quantity) : 'N/A' %></td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="6">No products found in this order.</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    
        <div class="order-summary">
            <h3>Order Summary</h3>
    
            <p>Order Status: <span class="status <%= order.status.toLowerCase() %>"><%= order.status %></span></p>
    
            <p>
                <% if(order.paymentStatus === 'failed') { %>
                    Payment Status: <span><%= order.paymentStatus %></span>
                <% } %>
            </p>
    
            <% if (order.paymentStatus === 'failed') { %>
                <button id="retry-payment-<%= order._id %>" class="retry-btn" onclick="retryPayment('<%= order.orderId %>', '<%= order.totalPrice %>')">Retry Payment</button>
            <% } %>

            <% if (couponDiscount > 0) { %>
                <p>Coupon Applied: ₹<%= couponDiscount %> off</p>
            <% } %>
    
    
            <p>Total: ₹<%= order.totalPrice %></p>
    
            <p>Delivery: <%= order.deliveryFee ? `₹${order.deliveryFee}` : 'Free' %></p>
    
            <p>Payment Method: <%= order.paymentMethod || 'Not Specified' %></p>
        </div>
    





        <div class="address">
            <h4>Shipping Address:</h4>
            <% if (order.address.name) { %>
                <p>Name: <%= order.address.name %></p>
                <p>Street: <%= order.address.street %></p>
                <p>City: <%= order.address.city %>
                </p>
                <p>State: <%= order.address.state %>
                </p>
                <p>ZIP: <%= order.address.zip %>
                </p>
                <p>Phone: <%= order.address.phone %>
                </p>
                <% } else { %>
                    <p>Address: <%= order.address.name %>, <%= order.address.street %>, <%= order.address.city %>, <%=
                                        order.address.state %>, <%= order.address.zip %>
                    </p>
                    <p>Phone: <%= order.address.phone %>
                    </p>
                    <% } %>
        </div>

        <% if (order.status !=='cancelled' && order.status !=='completed' && order.status !=='returned' ) { %>
            <button id="cancel-button-<%= order._id %>" class="action">Cancel Order</button>
            <% } %>

                <div id="modal-<%= order._id %>" class="modal">
                    <div class="modal-content">
                        <span id="close-modal-<%= order._id %>" class="close">&times;</span>
                        <h3>Are you sure you want to cancel this order?</h3>

                        <select id="cancel-reason-<%= order._id %>" class="cancel-reason-dropdown">
                            <option value="change_of_mind">Changed my mind</option>
                            <option value="found_better_price">Found a better price elsewhere</option>
                            <option value="delivery_issue">Delivery issues</option>
                            <option value="delayed_shipment">Delayed shipment</option>
                            <option value="other">Other</option>
                        </select>


                        <button id="confirm-cancel-<%= order._id %>" class="confirm-btn">Yes, Cancel</button>
                        <button id="close-modal-<%= order._id %>" class="cancel-btn">No, Keep Order</button>
                    </div>
                </div>


                <% if (order.status==='completed' ) { %>
                    <button id="returnOrderBtn-<%= order._id %>" class="btn btn-warning">Return Order</button>
                    <% } %>

                        <div id="modal-return-<%= order._id %>" class="modal">
                            <div class="modal-content">
                                <span id="close-modal-return-<%= order._id %>" class="close">&times;</span>
                                <h3>Select a reason for returning the order:</h3>
                                <select id="return-reason-<%= order._id %>" class="return-reason-dropdown">
                                    <option value="found_better_price">Found a better price elsewhere</option>
                                    <option value="delivery_issue">Delivery issues</option>
                                    <option value="wrong_item">Received wrong item</option>
                                    <option value="damaged_item">Received damaged item</option>
                                    <option value="size_issue">Wrong size or fit</option>
                                    <option value="other">Other</option> 
                                </select>
                                <button id="confirm-return-<%= order._id %>" class="confirm-btn">Confirm Return</button>
                                <button id="close-modal-return-<%= order._id %>" class="cancel-btn">Cancel</button>
                            </div>
                        </div>

                        <% if (order.status === "completed") { %>
                            <a href="/download-invoice/<%= order._id %>" class="btn btn-primary" target="_blank">
                                Download Invoice
                            </a>
                        <% } %>
                        


    </div>
</body>

</html>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.8/dist/sweetalert2.all.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
    document.querySelectorAll("[id^='cancel-button-']").forEach(button => {
        button.addEventListener("click", (event) => {
            const orderId = event.target.id.split("-")[2];
            document.getElementById(`modal-${orderId}`).style.display = "flex";
        });
    });

    document.querySelectorAll("[id^='close-modal-']").forEach(button => {
        button.addEventListener("click", (event) => {
            const orderId = event.target.id.split("-")[2];
            document.getElementById(`modal-${orderId}`).style.display = "none";
        });
    });

    window.addEventListener("click", (event) => {
        document.querySelectorAll(".modal").forEach(modal => {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        });
    });

    document.querySelectorAll("[id^='confirm-cancel-']").forEach(button => {
        button.addEventListener("click", async (event) => {
            const orderId = event.target.id.split("-")[2];
            const reason = document.querySelector(`#cancel-reason-${orderId}`).value ||
                document.querySelector(`input[name='cancel-reason-${orderId}']:checked`)?.value;

            if (!reason) {
                alert("Please select a reason for canceling the order.");
                return;
            }

            try {
                const response = await fetch(`/cancel-order/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, reason })
                });

                const data = await response.json();

                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Order Cancelled!',
                        text: 'Your order has been successfully cancelled.',
                        confirmButtonText: 'Okay',
                        background: '#f0f4f7',
                    });

                    location.reload();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops!',
                        text: data.message || 'Failed to cancel the order. Please try again.',
                        confirmButtonText: 'Okay',
                        background: '#f0f4f7',
                    });
                }
            } catch (err) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'An error occurred. Please try again.',
                    confirmButtonText: 'Okay',
                    background: '#f0f4f7',
                });
            }
        });
    });

</script>

<script>

document.body.addEventListener('click', function (event) {
    // For Return Order button click
    if (event.target && event.target.classList.contains('btn-warning')) {
        const buttonId = event.target.id;
        const orderId = buttonId.split('-')[1];

        // Show the modal with reason dropdown
        document.getElementById(`modal-return-${orderId}`).style.display = "flex";
    }

    // Close the modal
    if (event.target && event.target.classList.contains('close')) {
        const orderId = event.target.id.split('-')[2];
        document.getElementById(`modal-return-${orderId}`).style.display = "none";
    }

    // Confirm return order
    if (event.target && event.target.classList.contains('confirm-btn')) {
        const orderId = event.target.id.split('-')[2];
        const reason = document.getElementById(`return-reason-${orderId}`).value;

        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to return this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, return it!',
            cancelButtonText: 'Cancel',
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/returnOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId: orderId, reason: reason }),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire(
                                'Returned!',
                                data.message,
                                'success'
                            );
                            location.reload();
                        } else {
                            Swal.fire(
                                'Error!',
                                data.message,
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        Swal.fire(
                            'Error!',
                            'Something went wrong. Please try again later.',
                            'error'
                        );
                        console.error(error);
                    });
            }
        });
    }
});


</script>




<script>
    async function retryPayment(orderId, amount) {
        try {
            axios.post('/create-order', { amount })
                .then(res => {
                    if (res) {
                        console.log(res);
                        const options = {
                            key: 'rzp_test_ULiN3Z9C2M5zyq',
                            currency: 'INR',
                            order_id: res.data.orderId,
                            handler: function (paymentResponse) {
                                if (paymentResponse && paymentResponse.razorpay_payment_id) {
                                    axios.post('/retry-payment', { orderId })
                                        .then(response => {
                                            if (response.data.success) {
                                                Swal.fire({
                                                    icon: 'success',
                                                    title: 'Payment Successful!',
                                                    text: 'Your payment has been successfully processed.',
                                                }).then(() => {
                                                    location.reload()
                                                })
                                            } else {
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Payment Failed!',
                                                    text: 'There was an issue updating the payment status. Please try again.',
                                                });
                                            }
                                        })
                                        .catch(error => {
                                            console.error('Error retrying payment:', error);
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Error!',
                                                text: 'An error occurred while retrying the payment. Please try again.',
                                            });
                                        });
                                }
                            },
                        };

                        const razorpay = new Razorpay(options);
                        razorpay.open();
                    }
                })
                .catch(error => {
                    console.error('Error creating Razorpay order:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Creation Failed!',
                        text: 'There was an issue creating the order. Please try again.',
                    });
                });

        } catch (error) {
            console.error('Error in retryPayment function:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An unexpected error occurred. Please try again.',
            });
        }
    }
</script>